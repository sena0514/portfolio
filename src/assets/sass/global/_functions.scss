/*
 * 関数定義用ファイル
 */
 @use "variables" as *;
 @use "sass:math";
 
 
 // font-size: to-rem(16px) -> 1rem
 @function to-rem($px) {
   $rem: math.div($px, $root-font-size) * 1rem;
   @return $rem;
 }
 
 // font-size: to-em(16px, 32px) -> 0.5em
 @function to-em($px, $self-px: $root-font-size) {
   $em: math.div($px, $self-px) * 1em;
   @return $em;
 }
 
 /*
  * 流体タイポ計算用 関数
  *
  * @use parts/_fonts.scssファイルを参照
  */
 @function fluid-text($min-px, $max-px, $min-bp: $default-min-bp, $max-bp: $default-bp) {
   $slope: math.div($max-px - $min-px, $max-bp - $min-bp);
   $slope-vw: $slope * 100;
   $intercept-rems: to-rem($min-px - $slope * $min-bp);
   $min-rems: to-rem($min-px);
   $max-rems: to-rem($max-px);
   @return clamp(#{$min-rems}, #{$slope-vw}vw + #{$intercept-rems}, #{$max-rems});
 }
 @function fluid-max($min-px, $max-px, $min-bp: $default-bp, $max-bp: $default-max-bp) {
   $slope: math.div($max-px - $min-px, $max-bp - $min-bp);
   $slope-vw: $slope * 100;
   $intercept-rems: to-rem($min-px - $slope * $min-bp);
   $min-rems: to-rem($min-px);
   $max-rems: to-rem($max-px);
   @return clamp(#{$min-rems}, #{$slope-vw}vw + #{$intercept-rems}, #{$max-rems});
 }
 
 //px⇒vw変換用関数
 $viewport-width:1920;//; //基準画面幅のピクセル値
 $viewport-width-tab:1440;//; //基準画面幅のピクセル値
 $viewport-width-sm:375;//;
 
 @function vw($px) {
   $viewport: $viewport-width;
   @return calc($px / $viewport * 100vw);
 }
 @function tab($px) {
   $viewport: $viewport-width-tab;
   @return calc($px / $viewport * 100vw);
 }
 @function sm($px) {
   $viewport: $viewport-width-sm;
   @return calc($px / $viewport * 100vw);
 }
 
 
 @function minVw($pxValue,$maxValue){
   //$pxValue…vwに変換したいpx値を指定
   //$maxValue…最大値にしたい値+単位(pxやvw)を指定
   $viewport: $viewport-width;
   $vwValue:calc($pxValue / $viewport * 100vw);
   @return min($vwValue,$maxValue);
 }
 // @function minVwTab($pxValue,$maxValue){
 // 	//$pxValue…vwに変換したいpx値を指定
 // 	//$maxValue…最大値にしたい値+単位(pxやvw)を指定
 // 	$viewport: $viewport-width-tab;
 // 	$vwValue:calc($pxValue / $viewport * 100vw);
 // 	@return min($vwValue,$maxValue);
 // }
 
 // @function minVwSm($pxValue,$maxValue){
 // 	//$pxValue…vwに変換したいpx値を指定
 // 	//$maxValue…最大値にしたい値+単位(pxやvw)を指定
 // 	$viewport: $viewport-width-sm;
 // 	$vwValue:calc($pxValue / $viewport * 100vw);
 // 	@return min($vwValue,$maxValue);
 // }
 // @function maxVw($maxValue,$freeValue,){
 // 	//$pxValue…vwに変換したいpx値を指定
 // 	//$maxValue…最小値にしたい値+単位(pxやvw)を指定
 // 	$viewport: $viewport-width;
 // 	// $vwValue:($pxValue / $viewport * 100vw);
 // 	@return max($maxValue,$freeValue);
 // }
 
 
 @function maxVwSm($pxValue,$maxValue){
   //$pxValue…vwに変換したいpx値を指定
   //$maxValue…最小値にしたい値+単位(pxやvw)を指定
   $viewport: $viewport-width-sm;
   $vwValue:calc($pxValue / $viewport * 100vw);
   @return max($vwValue,$maxValue);
 }
 